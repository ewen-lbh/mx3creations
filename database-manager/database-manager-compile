#!/usr/bin/env node
const childProcess = require('child_process')
const cliProgress = require('cli-progress')
const Listr = require('listr')
const consola = require('consola')
const chalk = require('chalk')
const ora = require('ora')
const program = require('commander')
const compiler = require('./compiler')

program
  .option('-o, --output <path>', 'Output to the given filename.')
  .option('-l, --local', 'Compile for local files use.')
  .option(
    '-i, --indentation <level>',
    'Set the indentation level for the outputted JSON. Set to 0 to minify the output. Default: 0',
    parseInt,
    0
  )
  .parse(process.argv)

const tasks = new Listr([
  {
    title: 'Load and compile the database',
    task: () => {
      return new Listr([
        {
          title: 'Load the yaml file',
          task: (ctx, task) => {
            ctx.program = program
            ctx = compiler.database.load(ctx)
            task.title = chalk`Loaded {bold.green ${
              Object.entries(ctx.database).length
            }} collection(s)`
          }
        },
        {
          title: 'Compile',
          task: (ctx, task) => {
            ctx = compiler.database.compile(ctx)
          }
        },
        {
          title: 'Write to file',
          task: (ctx, task) => {
            compiler.database.write(ctx)
          }
        }
      ])
    }
  },
  {
    title: 'Process files',
    task: () => {
      return new Listr(
        [
          {
            title: 'Process videos',
            task: (ctx) => {
              ctx = compiler.videos.getList(ctx)
              return new Listr(
                ctx.videos.map((video) => {
                  return {
                    title: chalk`Processing {yellow ${video.gid}}`,
                    task: async () => {
                      ctx = await compiler.videos.processOne(ctx, video)
                    },
                    skip: () => {
                      if (compiler.videos.alreadyExists(video)) {
                        return 'The video was already processed'
                      }
                      return false
                    }
                  }
                }),
                { concurrent: true }
              )
            }
          },
          {
            title: 'Process PDFs',
            enabled: () => false,
            task: (ctx) => {
              const pdfs = compiler.database.pdfs.getList(ctx)
              return new Listr(
                pdfs.map((pdf) => ({
                  title: chalk`Process {yellow ${pdf.gid}}`,
                  task: (ctx, task) => compiler.pdfs.processOne(pdf)
                })),
                { concurrent: true }
              )
            }
          }
        ],
        { concurrent: true }
      )
    }
  }
])

tasks
  .run()
  .catch((err) => {
    consola.error(err)
  })
  .then(() => {
    const spinner = ora({ text: chalk`Loading...`, spinner: 'dots11' }).start()
    let ctx = compiler.database.load({ program })
    ctx = compiler.database.compile(ctx)
    const thumbs = compiler.thumbnails.getList(ctx)
    const uncomputedThumbs = thumbs.filter((t) => !t.skipped)
    spinner.text = 'Making missing dirs...'
    compiler.thumbnails.makeDirs(thumbs)
    spinner.succeed()
    const bar = new cliProgress.SingleBar(
      {
        format: chalk`{dim [\{value\}/\{total\}]} \{bar\} {dim (\{percentage\}%)}`,
        forceRedraw: true
      },
      cliProgress.Presets.shades_grey
    )
    if (uncomputedThumbs.length === 0) {
      consola.success(chalk`All thumbnails were already generated.`)
    } else {
      bar.start(thumbs.length, thumbs.length - uncomputedThumbs.length)
      uncomputedThumbs.forEach((t, i) => {
        // spinner.info(chalk`Skipped ${t.gid}: Already exists`)
        childProcess.exec(
          [
            'convert',
            '-thumbnail',
            t.resolution,
            t.thumbPathIn,
            t.thumbPathOut
          ].join(' '),
          (err, stdout, stderr) => {
            bar.increment()
            if (err) {
              spinner.stop()
              consola.error(err)
              spinner.start()
            }
            if (bar.getTotal() === i + 1) {
              bar.stop()
              consola.success(chalk`Thumbnails generated`)
            }
          }
        )
      })
    }
  })
